generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Hospital {
  id        String   @id @default(cuid())
  name      String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users  User[]
  orders Order[]
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        String   @default("SUBMITTER")
  password    String
  hospitalId  String?
  hospital    Hospital? @relation(fields: [hospitalId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders Order[]
}

model DrapeType {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  surgeryTypes SurgeryType[] @relation("SurgeryDefaultDrape")
  orders       Order[]
}

model SurgeryType {
  id                  String        @id @default(cuid())
  name                String        @unique
  description         String?
  defaultDrapeTypeId  String?
  defaultDrapeType    DrapeType?    @relation("SurgeryDefaultDrape", fields: [defaultDrapeTypeId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  defaultItems SurgeryTypeItem[]
  orders       Order[]
}

model Item {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  unit        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  defaultForSurgeries SurgeryTypeItem[]
  orderItems          OrderItem[]
}

model SurgeryTypeItem {
  id             String       @id @default(cuid())
  surgeryTypeId  String
  itemId         String
  defaultQuantity Int         @default(1)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  surgeryType SurgeryType @relation(fields: [surgeryTypeId], references: [id], onDelete: Cascade)
  item        Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([surgeryTypeId, itemId])
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique @default(cuid())
  hospitalId       String
  hospital         Hospital    @relation(fields: [hospitalId], references: [id])
  submitterId      String
  submitter        User        @relation(fields: [submitterId], references: [id])
  drapeTypeId      String?
  drapeTypeName    String?
  drapeType        DrapeType?  @relation(fields: [drapeTypeId], references: [id])
  surgeryTypeId    String?
  surgeryTypeName  String?
  surgeryType      SurgeryType? @relation(fields: [surgeryTypeId], references: [id])
  status           String      @default("PENDING")
  customizationNotes String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  completedAt      DateTime?

  items OrderItem[]

  @@index([status])
  @@index([submitterId])
  @@index([hospitalId])
  @@index([createdAt])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  itemId     String?
  itemName   String
  quantity   Int      @default(1)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item  Item? @relation(fields: [itemId], references: [id])

  @@index([orderId])
  @@index([itemId])
}
